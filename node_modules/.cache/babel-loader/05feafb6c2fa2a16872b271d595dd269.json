{"ast":null,"code":"var _jsxFileName = \"/Users/IsaacArnold/Documents/web-projects/react-projects/to-do-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Components/Header\";\nimport Quote from \"./Components/Quote\";\nimport Todo from \"./Components/Todo\";\nimport ToDoForm from \"./Components/ToDoForm\";\nimport { Icon } from \"@iconify/react\";\nimport saveIcon from \"@iconify/icons-carbon/save\"; // Main to-do code inspiration is from: https://www.digitalocean.com/community/tutorials/how-to-build-a-react-to-do-app-with-react-hooks\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const savedItems = JSON.parse(localStorage.getItem(\"todos\")); // Local storage code assistance is from: https://dev.to/saranshk/react-hooks-and-local-storage-let-s-build-a-todo-app-39g3\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  });\n  const [todos, setTodos] = useState(savedItems || []);\n\n  const addTodo = text => {\n    const newTodos = [...todos, {\n      text\n    }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const showEdittedTodos = text => {\n    const edittedTodos = [...todos, {\n      text\n    }];\n    setTodos(edittedTodos);\n  }; // Edit idea came from: https://ibaslogic.com/how-to-edit-todos-items-in-react/\n\n\n  const [editing, setEditing] = useState(false);\n  const [editText, setEditText] = useState(\"\");\n\n  const editTodo = (index, todo) => {\n    setEditing(true);\n    setEditText(todo.text);\n    removeTodo(index);\n  };\n\n  const handleEditChange = e => {\n    setEditText(e.target.value);\n  };\n\n  const handleEditSubmit = e => {\n    e.preventDefault();\n    if (!editText) return;\n    showEdittedTodos(editText);\n    setEditing(false);\n  };\n\n  let displayEdit = {};\n\n  if (editing) {\n    displayEdit.display = \"\";\n  } else {\n    displayEdit.display = \"none\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Quote, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"title\",\n        children: \"Tasks:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), todos.map((todo, index) => /*#__PURE__*/_jsxDEV(Todo, {\n        index: index,\n        todo: todo,\n        completeTodo: completeTodo,\n        removeTodo: removeTodo,\n        editTodo: editTodo\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleEditSubmit,\n      style: displayEdit,\n      className: \"edit-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"test\",\n        value: editText,\n        onChange: handleEditChange,\n        maxLength: \"20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Icon, {\n        icon: saveIcon,\n        className: \"save\",\n        style: {\n          color: \"#FFF\",\n          fontSize: \"23px\"\n        },\n        onClick: handleEditSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoForm, {\n      addTodo: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XIBcxs6QpP0C8MzoL1orQyzsT/4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/IsaacArnold/Documents/web-projects/react-projects/to-do-app/src/App.js"],"names":["React","useState","useEffect","Header","Quote","Todo","ToDoForm","Icon","saveIcon","App","savedItems","JSON","parse","localStorage","getItem","setItem","stringify","todos","setTodos","addTodo","text","newTodos","completeTodo","index","isCompleted","removeTodo","splice","showEdittedTodos","edittedTodos","editing","setEditing","editText","setEditText","editTodo","todo","handleEditChange","e","target","value","handleEditSubmit","preventDefault","displayEdit","display","map","color","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Components/Header\";\nimport Quote from \"./Components/Quote\";\nimport Todo from \"./Components/Todo\";\nimport ToDoForm from \"./Components/ToDoForm\";\nimport { Icon } from \"@iconify/react\";\nimport saveIcon from \"@iconify/icons-carbon/save\";\n\n// Main to-do code inspiration is from: https://www.digitalocean.com/community/tutorials/how-to-build-a-react-to-do-app-with-react-hooks\n\nfunction App() {\n  const savedItems = JSON.parse(localStorage.getItem(\"todos\"));\n\n  // Local storage code assistance is from: https://dev.to/saranshk/react-hooks-and-local-storage-let-s-build-a-todo-app-39g3\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  });\n\n  const [todos, setTodos] = useState(savedItems || []);\n\n  const addTodo = (text) => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const showEdittedTodos = (text) => {\n    const edittedTodos = [...todos, { text }];\n    setTodos(edittedTodos);\n  };\n\n  // Edit idea came from: https://ibaslogic.com/how-to-edit-todos-items-in-react/\n  const [editing, setEditing] = useState(false);\n  const [editText, setEditText] = useState(\"\");\n  const editTodo = (index, todo) => {\n    setEditing(true);\n    setEditText(todo.text);\n    removeTodo(index);\n  };\n\n  const handleEditChange = (e) => {\n    setEditText(e.target.value);\n  };\n\n  const handleEditSubmit = (e) => {\n    e.preventDefault();\n    if (!editText) return;\n    showEdittedTodos(editText);\n    setEditing(false);\n  };\n\n  let displayEdit = {};\n  if (editing) {\n    displayEdit.display = \"\";\n  } else {\n    displayEdit.display = \"none\";\n  }\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Quote />\n      <div className=\"todo-list\">\n        <p className=\"title\">Tasks:</p>\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n            editTodo={editTodo}\n          />\n        ))}\n      </div>\n      <form\n        onSubmit={handleEditSubmit}\n        style={displayEdit}\n        className=\"edit-form\"\n      >\n        <input\n          type=\"text\"\n          className=\"test\"\n          value={editText}\n          onChange={handleEditChange}\n          maxLength=\"20\"\n        />\n        <Icon\n          icon={saveIcon}\n          className=\"save\"\n          style={{ color: \"#FFF\", fontSize: \"23px\" }}\n          onClick={handleEditSubmit}\n        />\n      </form>\n      <ToDoForm addTodo={addTodo} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}